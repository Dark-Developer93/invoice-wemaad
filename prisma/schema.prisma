// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())
  firstName         String?
  lastName          String?
  address           String?
  email             String          @unique
  emailVerified     DateTime?
  image             String?
  companyName       String?
  companyEmail      String?
  companyAddress    String?
  companyTaxId      String?
  companyLogoUrl    String?
  stampsUrl         String?
  bankName          String?
  bankAccountName   String?
  bankAccountNumber String?
  bankSwiftCode     String?
  bankIBAN          String?
  bankAddress       String?
  accounts          Account[]
  sessions          Session[]
  // Optional for WebAuthn support
  Authenticator     Authenticator[]
  invoices          Invoice[]
  clients           Client[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Client {
  id       String   @id @default(cuid())
  name     String
  email    String?
  phone    String?
  taxId    String?
  website  String?
  notes    String?
  tags     String[] // Stored as JSON array
  category String?

  // Relations
  addresses      Address[]
  contactPersons ContactPerson[]
  invoices       Invoice[]
  customFields   ClientCustomField[]

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@unique([userId, email])
}

model Address {
  id        String      @id @default(cuid())
  type      AddressType
  street    String
  city      String
  state     String?
  country   String
  zipCode   String
  isDefault Boolean     @default(false)

  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactPerson {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  email     String
  phone     String?
  position  String?
  isPrimary Boolean @default(false)

  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([clientId, email])
}

model ClientCustomField {
  id    String @id @default(cuid())
  key   String
  value String

  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([clientId, key])
}

enum AddressType {
  BILLING
  SHIPPING
  OTHER
}

model Invoice {
  id String @id @default(uuid())

  invoiceName   String
  total         Int
  status        InvoiceStatus
  date          DateTime
  dueDate       Int
  fromName      String
  fromEmail     String
  fromAddress   String
  currency      String
  invoiceNumber Int
  invoiceNote   String?

  invoiceItemDescription String
  invoiceItemQuantity    Int
  invoiceItemRate        Int

  client   Client? @relation(fields: [clientId], references: [id])
  clientId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

enum InvoiceStatus {
  PAID
  PENDING
}
